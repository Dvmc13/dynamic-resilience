spring:
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

  cloud:
    bus:
      enabled: true
    inetutils:
      preferred-networks: 127.0.0.1
      ignored-interfaces: eth0

  application:
    name: global-config  # Nombre global (opcional)

server:
  port: 8080

management:
  endpoints:
    web:
      exposure:
        include: "*"  # Se exponen todos los endpoints (incluido "circuitbreakers")
  endpoint:
    health:
      show-details: always
    refresh:
      enabled: true
    prometheus:
      enabled: true

# -------------------------------------------------------------------
# RESILIENCE4J (con KEBAB-CASE para evitar errores de binding)
# -------------------------------------------------------------------
resilience4j:

  circuitbreaker:
    instances:
      "*":
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 5s
        metrics:
          enabled: true

  retry:
    instances:
      "*":
        max-attempts: 3
        wait-duration: 500ms
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2.0
        metrics:
          enabled: true

  ratelimiter:
    instances:
      "*":
        limit-for-period: 10
        limit-refresh-period: 1s
        timeout-duration: 100ms
        metrics:
          enabled: true

logging:
  level:
    root: INFO
    com.example.resilience_library: DEBUG

# -------------------------------------------------------------------
# CONFIGURACIÓN ESPECÍFICA DE TU LIBRERÍA (monitoreo y reglas)
# -------------------------------------------------------------------
resilience:
  monitor:
    interval: 30000  # en milisegundos
  services:
    - name: catalog-service
      host: ${CATALOG_SERVICE_HOST:localhost}
      port: ${CATALOG_SERVICE_PORT:8081}
      metrics:
        latencyEndpoint: /actuator/prometheus?name=http_server_requests_seconds_sum
        errorEndpoint: /actuator/prometheus?name=http_server_requests_seconds_count
        countEndpoint: /actuator/prometheus?name=http_server_requests_seconds_count
      rulesFile: https://raw.githubusercontent.com/Dvmc13/dynamic-resilience/main/rules/catalog-service-rules.yml

    - name: order-service
      host: ${ORDER_SERVICE_HOST:localhost}
      port: ${ORDER_SERVICE_PORT:8082}
      metrics:
        latencyEndpoint: /actuator/prometheus?name=http_server_requests_seconds_sum
        errorEndpoint: /actuator/prometheus?name=http_server_requests_seconds_count
        countEndpoint: /actuator/prometheus?name=http_server_requests_seconds_count
      rulesFile: https://raw.githubusercontent.com/Dvmc13/dynamic-resilience/main/rules/order-service-rules.yml
