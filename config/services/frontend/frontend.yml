spring:
  application:
    name: frontend
  cloud:
    config:
      fail-fast: true
      retry:
        initial-interval: 1000
        max-attempts: 6
        multiplier: 1.1

server:
  port: 8080
  tomcat:
    max-threads: 200
    max-connections: 1000
    connection-timeout: 5s

resilience:
  services:
    frontend:
      host: localhost
      port: 8080
      circuitbreaker:
        enabled: true
        forcedState: ${FRONTEND_CIRCUIT_FORCED_STATE:}
        metrics:
          enabled: true
          sliding-window-size: 100
          failure-rate-threshold: 50
      retry:
        enabled: true
        maxAttempts: 3
        waitDuration: 500ms
      ratelimiter:
        enabled: true
        limitForPeriod: 20
        limitRefreshPeriod: 1s
      bulkhead:
        enabled: true
        maxConcurrentCalls: 100
        maxWaitDuration: 50ms

# Configuración para exponer métricas a Prometheus
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics,circuitbreakers
  endpoint:
    health:
      show-details: always
      group:
        readiness:
          include: db,diskSpace
        liveness:
          include: ping
  metrics:
    tags:
      application: frontend
      environment: default
    export:
      prometheus:
        enabled: true

# Uso de Resilience4j directamente
resilience4j:
  circuitbreaker:
    instances:
      frontend:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 100
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        eventConsumerBufferSize: 10
  retry:
    instances:
      frontend:
        maxAttempts: 3
        waitDuration: 500ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - java.io.IOException
          - java.net.ConnectException
  bulkhead:
    instances:
      frontend:
        maxConcurrentCalls: 100
        maxWaitDuration: 50ms
  ratelimiter:
    instances:
      frontend:
        limitForPeriod: 20
        limitRefreshPeriod: 1s
        timeoutDuration: 0
        registerHealthIndicator: true

# Simulador de fallos para pruebas
chaos:
  monkey:
    enabled: ${CHAOS_MONKEY_ENABLED:false}
    watcher:
      restController: true
      service: true
    assaults:
      level: ${CHAOS_LEVEL:5}
      latency:
        enabled: ${LATENCY_ENABLED:false}
        timeRangeStart: 1000
        timeRangeEnd: 5000
      exceptions:
        enabled: ${EXCEPTIONS_ENABLED:false}
        type: java.io.IOException
        randomize: true
