# Reglas de resiliencia para el servicio frontend
rules:
  # Regla para errores de servidor (500)
  - name: "Server Error Retry"
    condition: "response.status >= 500"
    action: |
      if (retryCount < ${retry.maxAttempts:3}) {
        retryCount++;
        retry(delay = ${retry.waitDuration:500ms});
      } else {
        throw new ServiceUnavailableException("Falló después de ${retry.maxAttempts:3} reintentos");
      }
    metrics:
      - name: "retry_failures_total"
        description: "Total number of retry failures"
        labels:
          service: "frontend"
          statusCode: "${response.status}"

  # Regla para tiempos de respuesta excesivos
  - name: "Slow Response"
    condition: "response.time > 2000"
    action: |
      logWarning("Respuesta lenta detectada: " + response.time + "ms");
      recordMetric("slow_response_total", 1, {"endpoint": request.path});
      if (response.time > 5000) {
        // Si es extremadamente lento, marcarlo como fallo para el circuit breaker
        markAsFailure();
      }
    metrics:
      - name: "slow_response_total"
        description: "Total number of slow responses"
        labels:
          service: "frontend"
          threshold: "2000ms"

  # Regla para errores de conexión
  - name: "Connection Error"
    condition: "exception instanceof java.net.ConnectException"
    action: |
      if (retryCount < ${retry.maxAttempts:3}) {
        retryCount++;
        exponentialBackoff(baseDelay = ${retry.waitDuration:500ms}, multiplier = 2);
      } else {
        fallbackToCache();
      }
    metrics:
      - name: "connection_failures_total"
        description: "Total number of connection failures"
        labels:
          service: "frontend"
          exception: "${exception.class.simpleName}"

  # Regla para respuestas vacías
  - name: "Empty Response"
    condition: "response.body == null || response.body.isEmpty()"
    action: |
      if (!isHealthCheckEndpoint(request.path)) {
        logWarning("Respuesta vacía detectada para: " + request.path);
        useDefaultValue();
      }
    metrics:
      - name: "empty_response_total"
        description: "Total number of empty responses"
        labels:
          service: "frontend"
          endpoint: "${request.path}"

  # Regla para errores específicos de dominio
  - name: "Business Logic Error"
    condition: "response.body.contains('ERR_BUSINESS_LOGIC')"
    action: |
      logError("Error de lógica de negocio: " + response.body);
      recordMetric("business_logic_error_total", 1, {"type": extractErrorType(response.body)});
      // No se cuenta como fallo para el circuit breaker
      return response.withHeader("X-Business-Error", "true");
    metrics:
      - name: "business_logic_error_total"
        description: "Total number of business logic errors"
        labels:
          service: "frontend"

# Funciones utilitarias para las reglas
functions:
  - name: "isHealthCheckEndpoint"
    code: |
      function isHealthCheckEndpoint(path) {
        return path.endsWith("/health") || path.endsWith("/ping");
      }

  - name: "extractErrorType"
    code: |
      function extractErrorType(body) {
        // Extrae el tipo específico de error de negocio
        const match = body.match(/ERR_BUSINESS_LOGIC\[(.*?)\]/);
        return match ? match[1] : "UNKNOWN";
      }

  - name: "fallbackToCache"
    code: |
      function fallbackToCache() {
        // Implementación para recuperar de caché
        const cachedData = cacheService.get(request.path);
        if (cachedData) {
          return Response.ok(cachedData).header("X-From-Cache", "true");
        } else {
          return Response.status(503).body({
            "error": "Service Unavailable",
            "message": "No se pudo conectar al servicio y no hay datos en caché"
          });
        }
      }

  - name: "useDefaultValue"
    code: |
      function useDefaultValue() {
        // Provee valores por defecto según endpoint
        if (request.path.includes("/api/frontend/products")) {
          return Response.ok([]).header("X-Default-Response", "true");
        } else if (request.path.includes("/api/frontend/users")) {
          return Response.ok({}).header("X-Default-Response", "true");
        } else {
          return response;
        }
      }

  - name: "exponentialBackoff"
    code: |
      function exponentialBackoff(baseDelay, multiplier) {
        const delay = baseDelay * Math.pow(multiplier, retryCount - 1);
        retry(delay);
      }
